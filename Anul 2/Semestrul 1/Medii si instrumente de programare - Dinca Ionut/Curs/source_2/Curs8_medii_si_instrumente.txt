Metode extinse (Extension methods)

O metoda care "extinde" metodele publice deja existente pentru
o anumita clasa careia nu i se poate modifica codul sursa.
(Este intr-o librarie la care nu avem acces).

Se declara intr-o clasa statica, de tip static.

Sintaxa generala:

public static Extensions
{
	public static [tip_returnat] MethodName(this NumeClasaExtinsa numeRef, [lista_param])
	{
	
	}
}

sintaxa de apelare: numeRef.MethodName([lista_param]);

Exemplu:

(1) Sa se extinda clasa string (deja existenta) cu o metoda care verifica cate cifre apar in stringul repectiv.

 public static class Extensions
    {
        public static int GetDigitsCount(this string textValue)
        {
            if(string.IsNullOrEmpty(textValue))
            {
                return 0;
            }

            int count = 0;

            foreach(var c in textValue)
            {
                if(char.IsDigit(c))
                {
                    count++;
                }
            }

            return count;
        }
    }

class Program
    {
        static void Main(string[] args)
        {
            string s = "adasfasr3443f afa 45 ";
            var nr = s.GetDigitsCount();

            Console.WriteLine("Numarul de cifre: ", nr);
            Console.ReadKey();
        }
    }

(2) Se considera clasa deja existenta List<T>

Sa se adauge o metoda extinsa care verifica daca un obiect de tip List<T> este null sau este lista goala.

"IsNullOrEmpty"

   public static bool IsNullOrEmpty<T>(this List<T> list)
        {
            if(list == null)
            {
                return true;
            }

            if(list.Count == 0)
            {
                return true;
            }

            return false;
        }

(3) Sa se adauge clasei List<T> o metoda care verifica de cate ori apare o valoare data in lista

"GetOccurrences"

   public static int GetOccurrences<T>(this List<T> list, T value)
        {
            int result = 0;

            foreach(var v in list)
            {
                if (v.Equals(value))
                {
                    result++;
                }
            }

            return result;
        }

            List<string> l = new List<string>() { "aasda", "as", "asda", "as", "asdasdas", "as" };
            
            Console.WriteLine(l.GetOccurrences<string>("as"));


Introducere in LINQ to Objects 

LINQ (Language Integrated Query) : permite interogarea colectiilor de obiecte cu operatori
asemanatori cu cei din SQL (SELECT, WHERE, ORDERBY...)

Sunt implementati ca metode extinse in libraria Linq

            List<string> list = new List<string>() { "Aasda", "as", "asda", "as", "Asdasdas", "as" };

            var values = list.Where(x => char.IsUpper(x[0])).ToList();

